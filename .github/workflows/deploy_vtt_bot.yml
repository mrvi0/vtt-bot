name: Deploy VTT Bot Source to VPS2 (Git Pull)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-source:
    name: Deploy Source via Git Pull on VPS2
    runs-on: [self-hosted, linux, l1-ci] # Раннер на L1 (или GitHub-hosted, если L1 не нужен)
                                        # L1 здесь нужен только для триггера SSH команды на VPS2

    steps:
      # Шаг Checkout здесь не обязателен, так как весь код будет на VPS2
      # Но он может быть полезен для получения информации о коммите для уведомлений
      - name: Checkout Code (for metadata)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Получить всю историю для корректного git rev-parse

      - name: Deploy to VPS2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS2_WG_IP }}
          username: ${{ secrets.VPS2_SSH_USER }}
          key: ${{ secrets.L1_TO_VPS2_SSH_KEY }} # Или ключ от GitHub-hosted runner'а, если не L1
          # port: 22
          script: |
            set -e # Выход при ошибке
            APP_DIR="/root/vtt-bot"
            VENV_DIR="$APP_DIR/.venv"
            SERVICE_NAME="vtt-bot.service" # Имя твоего systemd сервиса

            echo ">>> Navigating to project directory on VPS2: $APP_DIR"
            cd $APP_DIR

            echo ">>> Creating/Updating .env file on VPS2..."
            # Создаем .env файл на сервере из секретов GitHub
            echo "DB_NAME=data/vtt_stats.db" >> .env
            mkdir -p data # Для файла БД

            echo ">>> Fetching latest changes from Git repository..."
            # Убедись, что ветка 'main' (или твоя основная) правильно настроена на VPS2
            git fetch origin main
            git reset --hard origin/main # Принудительно обновляем до состояния удаленной ветки
            # Или, если хочешь сохранить локальные изменения (не рекомендуется для CI):
            # git pull origin main

            echo ">>> Activating Python virtual environment..."
            if [ -f "$VENV_DIR/bin/activate" ]; then
              source $VENV_DIR/bin/activate
            else
              echo "ERROR: Virtual environment not found at $VENV_DIR. Please set it up."
              exit 1
            fi

            echo ">>> Installing/Updating Python dependencies..."
            pip install -r requirements.txt

            echo ">>> Restarting $SERVICE_NAME ..."
            # Используем sudo, если пользователь VPS2_SSH_USER не root и не имеет прав на systemctl без sudo
            # Можно настроить sudoers, чтобы разрешить этому пользователю перезапускать конкретный сервис без пароля
            sudo systemctl restart $SERVICE_NAME

            # Проверка статуса после перезапуска (опционально)
            sleep 5 # Даем сервису время на запуск
            sudo systemctl is-active --quiet $SERVICE_NAME && echo ">>> $SERVICE_NAME is active." || (echo ">>> ERROR: $SERVICE_NAME failed to start." && exit 1)

            echo ">>> VTT Bot Source Code Deployment complete on VPS2."

      - name: Send Telegram Success Notification
        if: success()
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT_ID }}
          token: ${{ secrets.TG_BOT_MONITOR_TOKEN }}
          message: |
            🚀 VTT Bot (Source) Deployed to VPS2
            Repo: ${{ github.repository }}
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            By: `${{ github.actor }}`
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Telegram Failure Notification
        if: failure()
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT_ID }}
          token: ${{ secrets.TG_BOT_MONITOR_TOKEN }}
          message: |
            🔥 VTT Bot (Source) Deployment Failed!
            Repo: ${{ github.repository }}
            Branch: `${{ github.ref_name }}`
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}