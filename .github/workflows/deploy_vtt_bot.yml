name: Build on L1 & Deploy VTT Bot to VPS2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build on L1, Push to GHCR, Deploy to VPS2
    runs-on: [self-hosted, linux, l1-ci] # –ú–µ—Ç–∫–∏ —Ç–≤–æ–µ–≥–æ —Ä–∞–Ω–Ω–µ—Ä–∞ –Ω–∞ L1

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx # –î–∞–µ–º ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —à–∞–≥–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        uses: docker/setup-buildx-action@v3

      - name: Define Docker metadata
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }} # ghcr.io/mrvi0/vtt-telegram-bot
          tags: |
            type=sha,format=short,prefix=
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' # –ù–µ –ª–æ–≥–∏–Ω–∏–º—Å—è –¥–ª—è PR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è self-hosted runner

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-vttbot
          cache-to: type=local,dest=/tmp/.buildx-cache-vttbot,mode=max
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –Ω–∞ L1 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–±–æ—Ä–æ–∫

      - name: Deploy to VPS2 via SSH from L1
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS2_WG_IP }}
          username: ${{ secrets.VPS2_SSH_USER }}
          key: ${{ secrets.L1_TO_VPS2_SSH_KEY }}
          # port: 22 # –ï—Å–ª–∏ SSH –ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            APP_DIR="/opt/vtt-bot" # –ü—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–∞ VPS2
            COMPOSE_FILE="docker-compose.yml" # –ò–º—è —Ñ–∞–π–ª–∞ Docker Compose –Ω–∞ VPS2

            echo ">>> Creating project directory on VPS2..."
            mkdir -p $APP_DIR
            cd $APP_DIR

            echo ">>> Creating .env file on VPS2..."
            echo "VTT_BOT_TOKEN=${{ secrets.VTT_BOT_TOKEN_SECRET }}" > .env
            echo "DB_NAME=data/vtt_stats.db" >> .env # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –º–∞–ø–∏—Ç—Å—è –Ω–∞ —Ö–æ—Å—Ç

            echo ">>> Creating/Updating $COMPOSE_FILE on VPS2..."
            # –ö–æ–ø–∏—Ä—É–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º docker-compose.yml –Ω–∞ VPS2
            # –í–∞–∂–Ω–æ: image –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—Ç, —á—Ç–æ –º—ã –∑–∞–ø—É—à–∏–ª–∏ –≤ GHCR
            cat << EOF > $COMPOSE_FILE
            services:
              vtt_bot:
                image: ${{ steps.docker_meta.outputs.tags_latest_only }} # ghcr.io/mrvi0/vtt-telegram-bot:latest
                container_name: vtt-telegram-bot
                restart: unless-stopped
                environment: # Docker Compose —Å–∞–º –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç .env –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                  # –õ–∏–±–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å, –µ—Å–ª–∏ .env –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è compose
                  # VTT_BOT_TOKEN: \${VTT_BOT_TOKEN} # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã .env –Ω–µ –±—ã–ª–æ
                volumes:
                  - ./bot_data:/app/data 
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ .env —Ñ–∞–π–ª –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å docker-compose.yml
            # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ env_file: .env –≤ docker-compose.yml
            EOF

            # –õ–æ–≥–∏–Ω –≤ GHCR —Å VPS2 (–µ—Å–ª–∏ –æ–±—Ä–∞–∑—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ, –Ω—É–∂–µ–Ω PAT)
            # –ï—Å–ª–∏ –æ–±—Ä–∞–∑—ã –ø—É–±–ª–∏—á–Ω—ã–µ, —ç—Ç–æ—Ç —à–∞–≥ –Ω–µ –Ω—É–∂–µ–Ω.
            if [ -n "${{ secrets.GHCR_PAT_FOR_VPS }}" ]; then
              echo ">>> Logging into GHCR from VPS2..."
              echo "${{ secrets.GHCR_PAT_FOR_VPS }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            fi
            
            echo ">>> Pulling latest image from GHCR on VPS2..."
            docker pull ${{ steps.docker_meta.outputs.tags_latest_only }} # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ :latest —Ç–µ–≥

            echo ">>> Stopping and starting new container on VPS2..."
            docker compose -f $COMPOSE_FILE down --remove-orphans || true # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –Ω–µ—Ç
            docker compose -f $COMPOSE_FILE up -d

            echo ">>> Cleaning up unused Docker images on VPS2..."
            docker image prune -a -f
            echo ">>> VTT Bot Deployment complete on VPS2."

      - name: Send Telegram Success Notification
        if: success()
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT_ID }}
          token: ${{ secrets.TG_BOT_MONITOR_TOKEN }}
          message: |
            üöÄ VTT Bot Deployed to VPS2 (via L1)
            Repo: ${{ github.repository }}
            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            By: `${{ github.actor }}`
            Image: `${{ steps.docker_meta.outputs.tags_latest_only }}`
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Telegram Failure Notification
        if: failure()
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TG_ALERT_CHAT_ID }}
          token: ${{ secrets.TG_BOT_MONITOR_TOKEN }}
          message: |
            üî• VTT Bot Deployment Failed!
            Repo: ${{ github.repository }}
            Branch: `${{ github.ref_name }}`
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}