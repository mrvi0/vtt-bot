import logging
import io
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import random

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞ src
from . import config 
from . import utils
from . import db_helpers
from . import media_processor
from aiogram.types import ParseMode
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TGTOKEN)
dp = Dispatcher(bot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db_helpers.init_db()

message_counter_for_ads = 0

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
async def get_ad_text() -> str | None:
    shared_data = await utils.get_shared_info_async()
    if not shared_data or "ads" not in shared_data:
        return None

    ads_config = shared_data["ads"]
    default_ad = ads_config.get("default_ad_text")
    additional_ads = ads_config.get("additional_ads", [])

    if additional_ads:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö
        # –ú–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å "weights"
        selected_ad_obj = random.choice(additional_ads)
        return selected_ad_obj.get("text")
    elif default_ad:
        # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
        return default_ad
    
    return None # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    logger.info(f"User {message.from_user.id} used /start")
    bot_info = await utils.get_bot_specific_info()
    
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç.\n"
    quick_start = ("–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ (–∫—Ä—É–∂–æ—á–µ–∫).\n"
                   "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Ä–∞–±–æ—Ç–∞–ª –≤ —á–∞—Ç–µ, –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç –∏ –¥–∞–π –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    if bot_info:
        welcome_text = bot_info.get("description", welcome_text)
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ "greeting" –∏–ª–∏ "welcome_message" –≤ JSON
        quick_start_from_json = bot_info.get("quick_start_guide", quick_start)
        full_message = f"{welcome_text}\n\n{quick_start_from_json}"
    else:
        full_message = f"{welcome_text}\n\n{quick_start}"
    
    full_message += "\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    await message.answer(full_message)

@dp.message_handler(commands=['help'])
async def show_help(message: types.Message):
    logger.info(f"User {message.from_user.id} used /help")
    bot_info = await utils.get_bot_specific_info()
    help_message_parts = ["–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:"]
    default_help_items = [
        "- –û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç.",
        "- /start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.",
        "- /info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ.",
        "- /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
    ]

    if bot_info and "help_text" in bot_info:
        # –ï—Å–ª–∏ help_text —ç—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ–≥–æ –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
        help_items_from_json = bot_info["help_text"].split('\n')
        help_message_parts.extend(help_items_from_json)
    else:
        help_message_parts.extend(default_help_items)
        
    await message.answer("\n".join(help_message_parts))

@dp.message_handler(commands=['info'])
async def show_info(message: types.Message):
    logger.info(f"User {message.from_user.id} used /info")
    bot_info = await utils.get_bot_specific_info()
    info_text_parts = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:"]
    
    if bot_info:
        name = bot_info.get("name", "VTT –ë–æ—Ç")
        description = bot_info.get("description", "–ü–µ—Ä–µ–≤–æ–¥ –ì–° –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç.")
        repo = bot_info.get("repository")
        
        info_text_parts.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
        info_text_parts.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        if repo:
            info_text_parts.append(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo}")
        
        if bot_info.get("basic_info") and "community" in bot_info["basic_info"]:
            community_info = bot_info["basic_info"]["community"]
            channel_url = community_info.get("telegram_channel_url")
            forum_url = community_info.get("telegram_forum_url")
            if channel_url:
                info_text_parts.append(f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {channel_url}")
            if forum_url:
                info_text_parts.append(f"–ß–∞—Ç/–§–æ—Ä—É–º: {forum_url}")
    else:
        info_text_parts.append("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.answer("\n".join(info_text_parts))

@dp.message_handler(commands=['stats'])
async def show_stats_command(message: types.Message): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
    logger.info(f"User {message.from_user.id} used /stats")
    stats_data = await db_helpers.get_stats() # –ü–æ–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—à—å –Ω–∞ aiosqlite, –∑–¥–µ—Å—å –±—É–¥–µ—Ç: stats_data = await db_helpers.get_stats_async()
    
    text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
            f" ‚îú –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_data.get('total_users', 0)}\n"
            f" ‚îú –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {stats_data.get('today_users', 0)}\n"
            f" ‚îú –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats_data.get('total_requests', 0)}\n"
            f" ‚îî –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats_data.get('today_requests', 0)}")
    await message.reply(text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –°–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_audio_message(message: types.Message, audio_source, message_type: str):
    user_id = message.from_user.id
    chat_id = message.chat.id # –ü–æ–ª—É—á–∞–µ–º chat_id
    audio_file_io = io.BytesIO()
    processed_audio_io = None
    
    try:
        await audio_source.download(destination_file=audio_file_io)
        audio_file_io.seek(0)

        if message_type == "voice":
            processed_audio_io = media_processor.process_audio_data(audio_file_io)
        elif message_type == "video_note":
            processed_audio_io = await media_processor.extract_audio_from_video_note(audio_file_io)
        
        if processed_audio_io:
            recognized_text = media_processor.recognize_speech_from_object(processed_audio_io)
            
            ad_text_to_append = None
            if config.AD_SHOW_INTERVAL > 0:
                current_chat_ad_count = await db_helpers.increment_chat_ad_counter(chat_id)
                logger.info(f"Chat {chat_id} ad counter: {current_chat_ad_count}")
                
                if current_chat_ad_count >= config.AD_SHOW_INTERVAL: # –ò—Å–ø–æ–ª—å–∑—É–µ–º >= –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    ad_text_to_append = await get_ad_text()
                    await db_helpers.reset_chat_ad_counter(chat_id)
                    logger.info(f"Showing ad in chat {chat_id}, counter reset.")
            
            final_reply_text = recognized_text
            if ad_text_to_append:
                final_reply_text += f"\n\n---\n{ad_text_to_append}" 
            
            # –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ–¥–Ω–∞:
            # await message.reply(final_reply_text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
            # –ï—Å–ª–∏ —Å—Å—ã–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö,
            # —Ç–æ –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ web page preview
            # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –∏ —Ç–µ–≥ <a href='...'>text</a> –±–µ–∑ –ø—Ä–µ–≤—å—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            # –î–ª—è Markdown, –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–µ –∫–∞–∫ [—Ç–µ–∫—Å—Ç](url)), –ø—Ä–µ–≤—å—é —á–∞—Å—Ç–æ –Ω–µ –±—ã–≤–∞–µ—Ç.
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ç–µ–∫—Å—Ç](url), —Ç–æ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –Ω—É–∂–µ–Ω disable_web_page_preview.
            # –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑–±–µ–≥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ [—Ç–µ–∫—Å—Ç](url), –∞ –ø–∏—Å–∞—Ç—å "–ö–∞–Ω–∞–ª: t.me/–∫–∞–Ω–∞–ª"
            # –ù–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ, —Ç–æ disable_web_page_preview=True
            await message.reply(final_reply_text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)

            await db_helpers.record_stat(user_id, message_type=message_type) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        else:
            # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–∞–∫ —Ä–∞–Ω–µ–µ) ...
            error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ."
            if message_type == "video_note":
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è."
            await message.reply(error_msg)
            
    except Exception as e:
        logger.error(f"Error processing {message_type} message from {user_id} in chat {chat_id}: {e}", exc_info=True)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    finally:
        audio_file_io.close()
        if processed_audio_io:
            processed_audio_io.close()

@dp.message_handler(content_types=types.ContentType.VOICE)
async def process_voice_message_handler(message: types.Message):
    logger.info(f"Received voice message from {message.from_user.id}")
    await handle_audio_message(message, message.voice, "voice")

@dp.message_handler(content_types=types.ContentType.VIDEO_NOTE)
async def process_video_note_message_handler(message: types.Message):
    logger.info(f"Received video_note message from {message.from_user.id}")
    await handle_audio_message(message, message.video_note, "video_note")

async def on_startup(dispatcher):
    await db_helpers.init_db()
    logger.info("VTT Bot started and DB initialized.")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ Telegram/Gotify

async def on_shutdown(dispatcher):
    logger.info("VTT Bot shutting down...")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î, –µ—Å–ª–∏ –æ–Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ (–Ω–æ –º—ã –∏—Ö –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö)

def main():
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)

if __name__ == '__main__':
    main()